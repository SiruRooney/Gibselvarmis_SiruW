################################################
#Select important variables in GLM involving nonignorable missing values using BIC_obs
#Codes only used for Italy data
#Siru Wang (siruw@student.unimelb.edu.au)
#################################################
BAPE=function(list.bape){
#FUNCTION: To store the parameter estimations in each model
#Argment:
#list.bape: A list which contains a set of vectors. The length of each vector is the number of parameters (intercept included) in the associated model.
#The order of each vector is fixed.
#The first vector reprensents the model for the response y regressed on predictor matrix (Z,X).
#The second set of vectors represents a set of models for predictors with missing values X.
#The third set of vectors represents a set of models for missing indicators of X.
#The last vector represents the model for the model for missing indicator of y.
#Example:
#There are 2 variables without missing values denoted by Z and 2 variables with missing values denoted by X. The response y also contains missing values.
#list.bape=list(l1,l2,l3,l4,l5,l6).
#l1=c(1,1,1,1,1); l2=c(1,1,1);l3=c(1,1,1,1);l4=c(1,1,1,1,1,1);l5=c(1,1,1,1,1,1,1);l6=c(1,1,1,1,1,1,1,1)
Beta=rep(0,sum(list.bape[[1]]))
Eta=rep(0,sum(list.bape[[NROW(list.bape)]]))
Alpha=lapply(list.bape[2:(1+0.5*(NROW(list.bape)-2))],function(x){y=rep(0,sum(x));return(y)})
Phi=lapply(list.bape[(2+0.5*(NROW(list.bape)-2)):(NROW(list.bape)-1)],function(x){y=rep(0,sum(x));return(y)})
return(list(Beta,Alpha,Phi,Eta))
}
BAPE(list(c(1,1,0),c(1,0,0,1)))
BAPE(list(c(1,1,0),c(1,0,0,1,1,1)))
load("E:/Missing_data_italy_weighted/step1_datageneration.RData")
load("E:/Missing_data_italy/step3_GibbsforModelselect/step3.1_iteration1.RData")
load("E:/MissingGibbs2_modified/MissingGibbs2/step1_misgibsimdata2.RData")
n.complete=NROW(na.omit(t(cbind(zz,xx))))#18 covariates without missing values
ind.zx=list(rep(1,NCOL(cbind(zz,xx))+1),rep(1,n.complete+1),rep(1,n.complete+2),rep(1,n.complete+4),rep(1,n.complete+5),rep(1,n.complete+6))
ind.zx
lapply(ind.zx,length)
BAPE=function(list.bape){
Beta=rep(0,sum(list.bape[[1]]))
Eta=rep(0,sum(list.bape[[NROW(list.bape)]]))
Alpha=lapply(list.bape[2:(1+0.5*(NROW(list.bape)-2))],function(x){y=rep(0,sum(x));return(y)})
Phi=lapply(list.bape[(2+0.5*(NROW(list.bape)-2)):(NROW(list.bape)-1)],function(x){y=rep(0,sum(x));return(y)})
return(list(Beta,Alpha,Phi,Eta))
}
ind.BAPE=function(list.bape){
ind.beta=list.bape[[1]]
ind.eta=list.bape[[NROW(list.bape)]]
ind.alpha=lapply(list.bape[2:(1+0.5*(NROW(list.bape)-2))],identity)
ind.phi=lapply(list.bape[(2+0.5*(NROW(list.bape)-2)):(NROW(list.bape)-1)],identity)
return(list(ind.beta,ind.alpha,ind.phi,ind.eta))
}
EM.BIC=function(predata,bape,ind.bape,rs.ind){
#first and second derivative functions for Italydata
#combination for missing data
Bitmatrix<-function(n){
set<-0:(2^n-1)
rst<-matrix(0,ncol=n,nrow=2^n)
for (i in 1:n){
rst[,i]=ifelse((set-rowSums(rst*rep(c(2^((n-1):0)),each=2^n)))/(2^(n-i))>=1,1,0)
}
rst
}
###################################################################################
#conditional weighted probability
con.w=function(predamis.k,bape,ind.bape,rs.k){#(z.intpt,x,y,bape,ind.bape,r,s,miscate)
p.ymis=exp(as.matrix(predamis.k[,1:NROW(ind.bape[[1]])][,(ind.bape[[1]]==1)])%*%as.matrix(bape[[1]]))/(1+exp(as.matrix(predamis.k[,1:NROW(ind.bape[[1]])][,(ind.bape[[1]]==1)])%*%as.matrix(bape[[1]])))
p.ymis=as.vector(p.ymis)
denom.k=dbinom(predamis.k[,NCOL(predamis.k)],1,p.ymis)
predamisr.k=matrix(0.0,nrow=NROW(predamis.k),ncol=NCOL(predamis.k)+2,byrow=TRUE);
predamisr.k[,1:NCOL(predamis.k)]=predamis.k;predamisr.k[,-(1:NCOL(predamis.k))]=matrix(rs.k[-NROW(rs.k)],nrow=NROW(predamis.k),ncol=NROW(rs.k)-1,byrow=TRUE)
for (i.xr in 1:(NROW(rs.k)-1)){
p.xrmis=exp(as.matrix(predamis.k[,1:NROW(ind.bape[[2]][[i.xr]])][,(ind.bape[[2]][[i.xr]]==1)])%*%as.matrix(bape[[2]][[i.xr]]))/(1+exp(as.matrix(predamis.k[,1:NROW(ind.bape[[2]][[i.xr]])][,(ind.bape[[2]][[i.xr]]==1)])%*%as.matrix(bape[[2]][[i.xr]])))
p.xrmis=as.vector(p.xrmis)
denom.k=denom.k*dbinom(predamis.k[,NROW(ind.bape[[2]][[i.xr]])+1],1,p.xrmis)
p.xrmis=exp(as.matrix(predamisr.k[,1:NROW(ind.bape[[3]][[i.xr]])][,(ind.bape[[3]][[i.xr]]==1)])%*%as.matrix(bape[[3]][[i.xr]]))/(1+exp(as.matrix(predamisr.k[,1:NROW(ind.bape[[3]][[i.xr]])][,(ind.bape[[3]][[i.xr]]==1)])%*%as.matrix(bape[[3]][[i.xr]])))
p.xrmis=as.vector(p.xrmis)
denom.k=denom.k*dbinom(rs.k[i.xr],1,p.xrmis)
}
print
p.smis=exp(as.matrix(predamisr.k[,1:NROW(ind.bape[[4]])][,(ind.bape[[4]]==1)])%*%as.matrix(bape[[4]]))/(1+exp(as.matrix(predamisr.k[,1:NROW(ind.bape[[4]])][,(ind.bape[[4]]==1)])%*%as.matrix(bape[[4]])))
p.smis=as.vector(p.smis)
denom.k=denom.k*dbinom(rs.k[NROW(rs.k)],1,p.smis)
mistype.p=denom.k/sum(denom.k)
as.vector(mistype.p)
}
###############################################################################
# create the function to generate covatiates list
# the indicator of which sample
comp.ind=complete.cases(predata)
mis.type=sapply(c(1:3),Bitmatrix)
Dy=function(predata,bape,ind.bape,rs.ind,comp.ind,mis.type){
predata.inpt=matrix(0.0,NROW(predata),NCOL(predata)+1);
predata.inpt[,1]=rep(1,NROW(predata));predata.inpt[,-1]=predata
#observed data
p.y=exp(as.matrix(predata.inpt[(comp.ind==TRUE),1:NROW(ind.bape[[1]])][,(ind.bape[[1]]==1)])%*%as.matrix(bape[[1]]))/(1+exp(as.matrix(predata.inpt[(comp.ind==TRUE),1:NROW(ind.bape[[1]])][,(ind.bape[[1]]==1)])%*%as.matrix(bape[[1]])))
p.y=as.vector(p.y)
D1y=colSums((predata.inpt[comp.ind==TRUE,NROW(ind.bape[[1]])+1]-p.y)*predata.inpt[(comp.ind==TRUE),1:NROW(ind.bape[[1]])][,(ind.bape[[1]]==1)])
D2y.k=t(apply(predata.inpt[(comp.ind==TRUE),1:NROW(ind.bape[[1]])][,ind.bape[[1]]==1],1,function(x){x%o%x}))*(-p.y*(1-p.y))
D2y.k=colSums(D2y.k)
D2y=matrix(D2y.k,sum(ind.bape[[1]]),sum(ind.bape[[1]]))
#unobserved data
for (i.mis in 1:NROW(predata[comp.ind==FALSE,])){
mistype.k=switch(as.character(NCOL(rs.ind)-sum(rs.ind[(comp.ind==FALSE),][i.mis,])),"1"=mis.type[[1]],"2"=mis.type[[2]],"3"=mis.type[[3]])
predamis.k=matrix(predata.inpt[(comp.ind==FALSE),][i.mis,],nrow=NROW(mistype.k),ncol=NCOL(predata.inpt),byrow=TRUE)
predamis.k[is.na(predamis.k)==T]=mistype.k
con.P=con.w(predamis.k,bape,ind.bape,rs.ind[comp.ind==FALSE,][i.mis,])
p.y=exp(as.matrix(predamis.k[,1:NROW(ind.bape[[1]])][,(ind.bape[[1]]==1)])%*%as.matrix(bape[[1]]))/(1+exp(as.matrix(predamis.k[,1:NROW(ind.bape[[1]])][,(ind.bape[[1]]==1)])%*%as.matrix(bape[[1]])))
p.y=as.vector(p.y)
D1y=D1y+colSums(as.vector(predamis.k[,NCOL(predamis.k)]-p.y)*predamis.k[,1:NROW(ind.bape[[1]])][,(ind.bape[[1]]==1)]*con.P)
D2y.k=t(apply(predamis.k[,1:NROW(ind.bape[[1]])][,ind.bape[[1]]==1],1,function(x){x%o%x}))*(-p.y)*(1-p.y)*con.P
D2y.k=colSums(D2y.k)
D2y=D2y+matrix(D2y.k,sum(ind.bape[[1]]),sum(ind.bape[[1]]))
}
list(D1y,D2y)
}
Dx=function(predata,bape,ind.bape,rs.ind,comp.ind,mistype,i.xr){
predata.inpt=matrix(0.0,NROW(predata),NCOL(predata)+1);
predata.inpt[,1]=rep(1,NROW(predata));predata.inpt[,-1]=predata
D1x=list(rep(0,NROW(bape[[2]][[1]])),rep(0,NROW(bape[[2]][[2]])));
D2x=list(matrix(0,NROW(bape[[2]][[1]]),NROW(bape[[2]][[1]])),matrix(0,NROW(bape[[2]][[2]]),NROW(bape[[2]][[2]])));
#observed data
p.x=exp(as.matrix(predata.inpt[comp.ind==TRUE,1:NROW(ind.bape[[2]][[i.xr]])][,ind.bape[[2]][[i.xr]]==1])%*%as.matrix(bape[[2]][[i.xr]]))/
(1+exp(as.matrix(predata.inpt[comp.ind==TRUE,1:NROW(ind.bape[[2]][[i.xr]])][,ind.bape[[2]][[i.xr]]==1])%*%as.matrix(bape[[2]][[i.xr]])))
p.x=as.vector(p.x)
D1x[[i.xr]]=colSums((predata.inpt[comp.ind==TRUE,NROW(ind.bape[[2]][[i.xr]])+1]-p.x)*predata.inpt[comp.ind==TRUE,1:NROW(ind.bape[[2]][[i.xr]])][,ind.bape[[2]][[i.xr]]==1])
D2x.k=t(apply(predata.inpt[(comp.ind==TRUE),1:NROW(ind.bape[[2]][[i.xr]])][,ind.bape[[2]][[i.xr]]==1],1,function(x){x%o%x}))*(-p.x*(1-p.x))
D2x.k=colSums(D2x.k)
D2x[[i.xr]]=matrix(D2x.k,sum(ind.bape[[2]][[i.xr]]),sum(ind.bape[[2]][[i.xr]]))
#unobserved data
for (i.mis in 1:NROW(predata[comp.ind==FALSE,])){
mistype.k=switch(as.character(NCOL(rs.ind)-sum(rs.ind[(comp.ind==FALSE),][i.mis,])),"1"=mis.type[[1]],"2"=mis.type[[2]],"3"=mis.type[[3]])
predamis.k=matrix(predata.inpt[(comp.ind==FALSE),][i.mis,],nrow=NROW(mistype.k),ncol=NCOL(predata.inpt),byrow=TRUE)
predamis.k[is.na(predamis.k)==T]=mistype.k
con.P=con.w(predamis.k,bape,ind.bape,rs.ind[comp.ind==FALSE,][i.mis,])
p.x=exp(as.matrix(predamis.k[,1:NROW(ind.bape[[2]][[i.xr]])][,(ind.bape[[2]][[i.xr]]==1)])%*%as.matrix(bape[[2]][[i.xr]]))/(1+exp(as.matrix(predamis.k[,1:NROW(ind.bape[[2]][[i.xr]])][,(ind.bape[[2]][[i.xr]]==1)])%*%as.matrix(bape[[2]][[i.xr]])))
p.x=as.vector(p.x)
D1x[[i.xr]]=D1x[[i.xr]]+colSums(as.vector(predamis.k[,NROW(ind.bape[[2]][[i.xr]])+1]-p.x)*predamis.k[,1:NROW(ind.bape[[2]][[i.xr]])][,(ind.bape[[2]][[i.xr]]==1)]*con.P)
D2x.k=t(apply(predamis.k[,1:NROW(ind.bape[[2]][[i.xr]])][,ind.bape[[2]][[i.xr]]==1],1,function(x){x%o%x}))*(-p.x)*(1-p.x)*con.P
D2x.k=colSums(D2x.k)
D2x[[i.xr]]=D2x[[i.xr]]+matrix(D2x.k,sum(ind.bape[[2]][[i.xr]]),sum(ind.bape[[2]][[i.xr]]))
}
list(D1x,D2x)
}
Dr=function(predata,bape,ind.bape,rs.ind,comp.ind,mistype,i.xr){
predatar.inpt=matrix(0.0,NROW(predata),NCOL(predata)+NCOL(rs.ind))
predatar.inpt[,1]=rep(1,NROW(predata));
predatar.inpt[,2:(NCOL(predata)+1)]=predata;predatar.inpt[,(NCOL(predatar.inpt)-1):(NCOL(predatar.inpt))]=rs.ind[,-NCOL(rs.ind)]
D1r=list(rep(0,NROW(bape[[3]][[1]])),rep(0,NROW(bape[[3]][[2]])));
D2r=list(matrix(0,NROW(bape[[3]][[1]]),NROW(bape[[3]][[1]])),matrix(0,NROW(bape[[3]][[2]]),NROW(bape[[3]][[2]])));
#observed data
p.r=exp(as.matrix(predatar.inpt[comp.ind==TRUE,1:NROW(ind.bape[[3]][[i.xr]])][,ind.bape[[3]][[i.xr]]==1])%*%as.matrix(bape[[3]][[i.xr]]))/
(1+exp(as.matrix(predatar.inpt[comp.ind==TRUE,1:NROW(ind.bape[[3]][[i.xr]])][,ind.bape[[3]][[i.xr]]==1])%*%as.matrix(bape[[3]][[i.xr]])))
p.r=as.vector(p.r)
D1r[[i.xr]]=colSums((predatar.inpt[comp.ind==TRUE,NROW(ind.bape[[3]][[i.xr]])+1]-p.r)*predatar.inpt[comp.ind==TRUE,1:NROW(ind.bape[[3]][[i.xr]])][,ind.bape[[3]][[i.xr]]==1])
D2r.k=t(apply(predatar.inpt[(comp.ind==TRUE),1:NROW(ind.bape[[3]][[i.xr]])][,ind.bape[[3]][[i.xr]]==1],1,function(x){x%o%x}))*(-p.r*(1-p.r))
D2r.k=colSums(D2r.k)
D2r[[i.xr]]=matrix(D2r.k,sum(ind.bape[[3]][[i.xr]]),sum(ind.bape[[3]][[i.xr]]))
#unobserved data
for (i.mis in 1:NROW(predata[comp.ind==FALSE,])){
mistype.k=switch(as.character(NCOL(rs.ind)-sum(rs.ind[(comp.ind==FALSE),][i.mis,])),"1"=mis.type[[1]],"2"=mis.type[[2]],"3"=mis.type[[3]])
predamis.k=matrix(predatar.inpt[(comp.ind==FALSE),][i.mis,],nrow=NROW(mistype.k),ncol=NCOL(predatar.inpt),byrow=TRUE)
predamis.k[is.na(predamis.k)==T]=mistype.k
con.P=con.w(predamis.k[,1:(NCOL(predata)+1)],bape,ind.bape,rs.ind[comp.ind==FALSE,][i.mis,])
p.r=exp(as.matrix(predamis.k[,1:NROW(ind.bape[[3]][[i.xr]])][,(ind.bape[[3]][[i.xr]]==1)])%*%as.matrix(bape[[3]][[i.xr]]))/(1+exp(as.matrix(predamis.k[,1:NROW(ind.bape[[3]][[i.xr]])][,(ind.bape[[3]][[i.xr]]==1)])%*%as.matrix(bape[[3]][[i.xr]])))
p.r=as.vector(p.r)
D1r[[i.xr]]=D1r[[i.xr]]+colSums(as.vector(predamis.k[,NROW(ind.bape[[3]][[i.xr]])+1]-p.r)*predamis.k[,1:NROW(ind.bape[[3]][[i.xr]])][,(ind.bape[[3]][[i.xr]]==1)]*con.P)
D2r.k=t(apply(predamis.k[,1:NROW(ind.bape[[3]][[i.xr]])][,ind.bape[[3]][[i.xr]]==1],1,function(x){x%o%x}))*(-p.r)*(1-p.r)*con.P
D2r.k=colSums(D2r.k)
D2r[[i.xr]]=D2r[[i.xr]]+matrix(D2r.k,sum(ind.bape[[3]][[i.xr]]),sum(ind.bape[[3]][[i.xr]]))
}
list(D1r,D2r)
}
Ds=function(predata,bape,ind.bape,rs.ind,comp.ind,mistype){
predatars.inpt=matrix(0.0,NROW(predata),NCOL(predata)+NCOL(rs.ind)+1)
predatars.inpt[,1]=rep(1,NROW(predata));
predatars.inpt[,2:(NCOL(predata)+1)]=predata;predatars.inpt[,(NCOL(predatars.inpt)-2):(NCOL(predatars.inpt))]=rs.ind
###################################################################
#  if(sum(ind.bape[[4]])==1){
#   D1s=sum((predatars.inpt[comp.ind==TRUE,NROW(ind.bape[[4]])+1]-p.s)*predatars.inpt[(comp.ind==TRUE),1:NROW(ind.bape[[4]])][,(ind.bape[[4]]==1)])
#   D2s.k=(predatars.inpt[(comp.ind==TRUE),1:NROW(ind.bape[[4]])][,ind.bape[[4]]==1]^2)*(-p.s*(1-p.s))
#  D2s.k=sum(D2s.k)
#  D2s=matrix(D2s.k,sum(ind.bape[[4]]),sum(ind.bape[[4]]))
#unobserved data
#   for (i.mis in 1:NROW(predata[comp.ind==FALSE,])){
#     mistype.k=switch(as.character(NCOL(rs.ind)-sum(rs.ind[(comp.ind==FALSE),][i.mis,])),"1"=mis.type[[1]],"2"=mis.type[[2]],"3"=mis.type[[3]])
#      predamis.k=matrix(predatars.inpt[(comp.ind==FALSE),][i.mis,],nrow=NROW(mistype.k),ncol=NCOL(predatars.inpt),byrow=TRUE)
#      predamis.k[is.na(predamis.k)==T]=mistype.k
#      con.P=con.w(predamis.k[,1:(NCOL(predata)+1)],bape,ind.bape,rs.ind[comp.ind==FALSE,][i.mis,])
#     p.s=exp(as.matrix(predamis.k[,1:NROW(ind.bape[[4]])][,(ind.bape[[4]]==1)])%*%as.matrix(bape[[4]]))/(1+exp(as.matrix(predamis.k[,1:NROW(ind.bape[[4]])][,(ind.bape[[4]]==1)])%*%as.matrix(bape[[4]])))
#   p.s=as.vector(p.s)
#   D1s=D1s+sum(as.vector(predamis.k[,NCOL(predamis.k)]-p.s)*predamis.k[,1:NROW(ind.bape[[4]])][,(ind.bape[[4]]==1)]*con.P)
#  D2s.k=(predamis.k[,1:NROW(ind.bape[[4]])][,ind.bape[[4]]==1]^2)*(-p.s)*(1-p.s)*con.P
#   D2s.k=sum(D2s.k)
#   D2s=D2s+matrix(D2s.k,sum(ind.bape[[4]]),sum(ind.bape[[4]]))
# }
# }else{
#observed data
p.s=exp(predatars.inpt[(comp.ind==TRUE),1:NROW(ind.bape[[4]])][,(ind.bape[[4]]==1)]%*%bape[[4]])/(1+exp(predatars.inpt[(comp.ind==TRUE),1:NROW(ind.bape[[4]])][,(ind.bape[[4]]==1)]%*%bape[[4]]))
p.s=as.vector(p.s)
D1s=colSums((predatars.inpt[comp.ind==TRUE,NROW(ind.bape[[4]])+1]-p.s)*predatars.inpt[(comp.ind==TRUE),1:NROW(ind.bape[[4]])][,(ind.bape[[4]]==1)])
D2s.k=t(apply(predatars.inpt[(comp.ind==TRUE),1:NROW(ind.bape[[4]])][,ind.bape[[4]]==1],1,function(x){x%o%x}))*(-p.s*(1-p.s))
D2s.k=colSums(D2s.k)
D2s=matrix(D2s.k,sum(ind.bape[[4]]),sum(ind.bape[[4]]))
#unobserved data
for (i.mis in 1:NROW(predata[comp.ind==FALSE,])){
mistype.k=switch(as.character(NCOL(rs.ind)-sum(rs.ind[(comp.ind==FALSE),][i.mis,])),"1"=mis.type[[1]],"2"=mis.type[[2]],"3"=mis.type[[3]])
predamis.k=matrix(predatars.inpt[(comp.ind==FALSE),][i.mis,],nrow=NROW(mistype.k),ncol=NCOL(predatars.inpt),byrow=TRUE)
predamis.k[is.na(predamis.k)==T]=mistype.k
con.P=con.w(predamis.k[,1:(NCOL(predata)+1)],bape,ind.bape,rs.ind[comp.ind==FALSE,][i.mis,])
p.s=exp(as.matrix(predamis.k[,1:NROW(ind.bape[[4]])][,(ind.bape[[4]]==1)])%*%as.matrix(bape[[4]]))/(1+exp(as.matrix(predamis.k[,1:NROW(ind.bape[[4]])][,(ind.bape[[4]]==1)])%*%as.matrix(bape[[4]])))
p.s=as.vector(p.s)
D1s=D1s+colSums(as.vector(predamis.k[,NCOL(predamis.k)]-p.s)*predamis.k[,1:NROW(ind.bape[[4]])][,(ind.bape[[4]]==1)]*con.P)
D2s.k=t(apply(predamis.k[,1:NROW(ind.bape[[4]])][,ind.bape[[4]]==1],1,function(x){x%o%x}))*(-p.s)*(1-p.s)*con.P
D2s.k=colSums(D2s.k)
D2s=D2s+matrix(D2s.k,sum(ind.bape[[4]]),sum(ind.bape[[4]]))
}
list(D1s,D2s)
}
################################################################################################################
i.EM=1
bape0=bape
while((i.EM<=20)||((i.EM<=25)&&max(abs(unlist(bape)-unlist(bape0)))<=0.2)){
bape0=bape
cat("i.EM",i.EM,"\n")
D12y=Dy(predata,bape,ind.bape,rs.ind,comp.ind,mis.type)
bape[[1]]=bape[[1]]-solve(D12y[[2]],D12y[[1]])
for (i.mis in 1:(NCOL(rs.ind)-1)){
if(sum(ind.bape[[2]][[i.mis]])==1){
bape[[2]][[i.mis]]=glm(predata[,complete.cases(t(predata))==FALSE][,i.mis]~1,family=binomial(link=logit))$coefficients
}else{
D12x=Dx(predata,bape,ind.bape,rs.ind,comp.ind,mis.type,i.mis)
bape[[2]][[i.mis]]=bape[[2]][[i.mis]]-solve(D12x[[2]][[i.mis]],D12x[[1]][[i.mis]])
}
if(sum(ind.bape[[3]][[i.mis]])==1){
bape[[3]][[i.mis]]=glm(rs.ind[,i.mis]~1,family=binomial(link=logit))$coefficients
}else{
D12r=Dr(predata,bape,ind.bape,rs.ind,comp.ind,mis.type,i.mis)
bape[[3]][[i.mis]]=bape[[3]][[i.mis]]-solve(D12r[[2]][[i.mis]],D12r[[1]][[i.mis]])}
}
if(sum(ind.bape[[4]])==1){
bape[[4]]=glm(rs.ind[,3]~1,family=binomial(link=logit))$coefficients
}else{D12s=Ds(predata,bape,ind.bape,rs.ind,comp.ind,mis.type)
bape[[4]]=bape[[4]]-solve(D12s[[2]],D12s[[1]])}
#print(class(bape[[4]]))
i.EM=i.EM+1
}
#print(bape)
cat("i.EM",i.EM,"\n")
# definition of BIC
BIC.def=function(predata,bape,ind.bape,rs.ind,comp.ind,mis.type){
p=NROW(unlist(bape))
#log information of BIC
log.BIC=function(predata,bape,ind.bape,rs.ind,comp.ind,mis.type){
predatars.inpt=matrix(0.0,NROW(predata),NCOL(predata)+NCOL(rs.ind)+1)
predatars.inpt[,1]=rep(1,NROW(predata));
predatars.inpt[,2:(NCOL(predata)+1)]=predata;predatars.inpt[,(NCOL(predatars.inpt)-2):(NCOL(predatars.inpt))]=rs.ind
#observed data
p.y=exp(predatars.inpt[(comp.ind==TRUE),1:NROW(ind.bape[[1]])][,(ind.bape[[1]]==1)]%*%bape[[1]])/(1+exp(predatars.inpt[(comp.ind==TRUE),1:NROW(ind.bape[[1]])][,(ind.bape[[1]]==1)]%*%bape[[1]]))
p.y=as.vector(p.y)
L.obs=dbinom(predatars.inpt[(comp.ind==TRUE),NROW(ind.bape[[1]])+1],1,p.y)
for (i.xr in 1:2){
p.x=exp(as.matrix(predatars.inpt[comp.ind==TRUE,1:NROW(ind.bape[[2]][[i.xr]])][,ind.bape[[2]][[i.xr]]==1])%*%as.matrix(bape[[2]][[i.xr]]))/
(1+exp(as.matrix(predatars.inpt[comp.ind==TRUE,1:NROW(ind.bape[[2]][[i.xr]])][,ind.bape[[2]][[i.xr]]==1])%*%as.matrix(bape[[2]][[i.xr]])))
p.x=as.vector(p.x)
L.obs=L.obs*dbinom(predatars.inpt[(comp.ind==TRUE),NROW(ind.bape[[2]][[i.xr]])+1],1,p.x)
p.r=exp(as.matrix(predatars.inpt[comp.ind==TRUE,1:NROW(ind.bape[[3]][[i.xr]])][,ind.bape[[3]][[i.xr]]==1])%*%as.matrix(bape[[3]][[i.xr]]))/
(1+exp(as.matrix(predatars.inpt[comp.ind==TRUE,1:NROW(ind.bape[[3]][[i.xr]])][,ind.bape[[3]][[i.xr]]==1])%*%as.matrix(bape[[3]][[i.xr]])))
p.r=as.vector(p.r)
L.obs=L.obs*dbinom(predatars.inpt[(comp.ind==TRUE),NROW(ind.bape[[3]][[i.xr]])+1],1,p.r)
}
p.s=exp(as.matrix(predatars.inpt[(comp.ind==TRUE),1:NROW(ind.bape[[4]])][,(ind.bape[[4]]==1)])%*%as.matrix(bape[[4]]))/(1+exp(as.matrix(predatars.inpt[(comp.ind==TRUE),1:NROW(ind.bape[[4]])][,(ind.bape[[4]]==1)])%*%as.matrix(bape[[4]])))
p.s=as.vector(p.s)
L.obs=L.obs*dbinom(predatars.inpt[(comp.ind==TRUE),NROW(ind.bape[[4]])+1],1,p.s)
l.obs=sum(log(L.obs))
#unobserved data
for (i.mis in 1:NROW(predata[comp.ind==FALSE,])){
mistype.k=switch(as.character(NCOL(rs.ind)-sum(rs.ind[(comp.ind==FALSE),][i.mis,])),"1"=mis.type[[1]],"2"=mis.type[[2]],"3"=mis.type[[3]])
predamis.k=matrix(predatars.inpt[(comp.ind==FALSE),][i.mis,],nrow=NROW(mistype.k),ncol=NCOL(predatars.inpt),byrow=TRUE)
predamis.k[is.na(predamis.k)==T]=mistype.k
con.P=con.w(predamis.k[,1:(NCOL(predata)+1)],bape,ind.bape,rs.ind[comp.ind==FALSE,][i.mis,])
p.ymis=exp(predamis.k[,1:NROW(ind.bape[[1]])][,(ind.bape[[1]]==1)]%*%bape[[1]])/(1+exp(predamis.k[,1:NROW(ind.bape[[1]])][,(ind.bape[[1]]==1)]%*%bape[[1]]))
p.ymis=as.vector(p.ymis)
denom.k=dbinom(predamis.k[,NROW(ind.bape[[1]])+1],1,p.ymis)
for (i.xr in 1:(NCOL(rs.ind)-1)){
p.xrmis=exp(predamis.k[,1:NROW(ind.bape[[2]][[i.xr]])][,(ind.bape[[2]][[i.xr]]==1)]%*%bape[[2]][[i.xr]])/(1+exp(predamis.k[,1:NROW(ind.bape[[2]][[i.xr]])][,(ind.bape[[2]][[i.xr]]==1)]%*%bape[[2]][[i.xr]]))
p.xrmis=as.vector(p.xrmis)
denom.k=denom.k*dbinom(predamis.k[,NROW(ind.bape[[2]][[i.xr]])+1],1,p.xrmis)
p.xrmis=exp(predamis.k[,1:NROW(ind.bape[[3]][[i.xr]])][,(ind.bape[[3]][[i.xr]]==1)]%*%bape[[3]][[i.xr]])/(1+exp(predamis.k[,1:NROW(ind.bape[[3]][[i.xr]])][,(ind.bape[[3]][[i.xr]]==1)]%*%bape[[3]][[i.xr]]))
p.xrmis=as.vector(p.xrmis)
denom.k=denom.k*dbinom(predamis.k[,NROW(ind.bape[[3]][[i.xr]])+1],1,p.xrmis)
}
p.smis=exp(as.matrix(predamis.k[,1:NROW(ind.bape[[4]])][,(ind.bape[[4]]==1)])%*%as.matrix(bape[[4]]))/(1+exp(as.matrix(predamis.k[,1:NROW(ind.bape[[4]])][,(ind.bape[[4]]==1)])%*%as.matrix(bape[[4]])))
p.smis=as.vector(p.smis)
denom.k=denom.k*dbinom(predamis.k[,NROW(ind.bape[[4]])+1],1,p.smis)
l.obs=l.obs+sum(log(denom.k)*con.P)
}
return(l.obs)
}
def.val=-2*log.BIC(predata,bape,ind.bape,rs.ind,comp.ind,mis.type)+p*log(NROW(predata))
return(def.val)
}
BIC.def(predata,bape,ind.bape,rs.ind,comp.ind,mis.type)
}
Gibbs.sampler<-function(predata,rs.ind,ind,iter.Gibs){
###########################################################################################
# the definition of full conditional distribution
FCP<-function(predata,rs.ind,ind,rr,cc){#n from the last to the second
source("F://Missingdatacodes//MissingGibbs2//MisGibsfunction3.R")
ind[[rr]][cc]<-1
fun1.bic=EM.BIC(predata,BAPE(ind),ind.BAPE(ind),rs.ind)
cat("fun1",fun1.bic,"\n")
###################################################################################
ind[[rr]][cc]<-0
fun2.bic=EM.BIC(predata,BAPE(ind),ind.BAPE(ind),rs.ind)
cat("fun2",fun2.bic,"\n")
res<-1/{1+exp(0.8*(-fun2.bic+fun1.bic))}
return(c(res,min(fun1.bic,fun2.bic)))
}
#tab.matrix=list(matrix(0,(NROW(unlist(ind))-NROW(ind))*iter.Gibs,NROW(ind[[1]])),matrix(0,(NROW(unlist(ind))-NROW(ind))*iter.Gibs,NROW(ind[[2]])),
#               matrix(0,(NROW(unlist(ind))-NROW(ind))*iter.Gibs,NROW(ind[[3]])),matrix(0,(NROW(unlist(ind))-NROW(ind))*iter.Gibs,NROW(ind[[4]])),
#              matrix(0,(NROW(unlist(ind))-NROW(ind))*iter.Gibs,NROW(ind[[5]])),matrix(0,(NROW(unlist(ind))-NROW(ind))*iter.Gibs,NROW(ind[[6]])))
tab.matrix=lapply(ind,function(x,y){matrix(0,(NROW(unlist(y[[1]]))-NROW(y[[1]]))*y[[2]],NROW(x)+1)},list(ind,iter.Gibs))
i.tabmatrix=1
for(i.Gib in 1:iter.Gibs){#cat("Gib",i.Gib,"\n")
for(rr in NROW(ind):1){
for (cc in NROW(ind[[rr]]):2){cat("n",c(i.Gib,rr,cc),"\n")
print(ind)
fcp=FCP(predata,rs.ind,ind,rr,cc)
ind[[rr]][cc]<-rbinom(1,1,fcp[1])
for (i.tab in 1:NROW(ind)){tab.matrix[[i.tab]][i.tabmatrix,]=c(fcp[2],ind[[i.tab]])}
i.tabmatrix=i.tabmatrix+1
}
}
}
list(tab.matrix)
}
predata=cbind(zz,xx[,c(1,2,4)],xx[,c(3,5)],yy)
rs.ind=cbind(rr.x,ss.y)
ind=ind.zx
tab.matrix=lapply(ind,function(x,y){matrix(0,(NROW(unlist(y[[1]]))-NROW(y[[1]]))*y[[2]],NROW(x)+1)},list(ind,iter.Gibs))
iter.Gibs=30
tab.matrix=lapply(ind,function(x,y){matrix(0,(NROW(unlist(y[[1]]))-NROW(y[[1]]))*y[[2]],NROW(x)+1)},list(ind,iter.Gibs))
i.tabmatrix=1
dim(tab.matrix)
class(tab.matrix)
tab.matrix
length(tab.matrix)
i.Gib=1
rr=1
NROW(ind[[rr]]):2
NROW(ind[[2]]):2
class(ind)
length(ind)
apply(ind,length)
lapply(ind,length)
cc
cc=NROW(ind[[rr]])
cc
BAPE(ind)
bape=BAPE(ind)
length(bape)
length(bape[[1]])
length(bape[[2]][1])
length(bape[[2]][[1]])
ind.bape=ind.BAPE(ind)
ind.bape
length(ind.bape[[1]])
#first and second derivative functions for Italydata
#combination for missing data
Bitmatrix<-function(n){
set<-0:(2^n-1)
rst<-matrix(0,ncol=n,nrow=2^n)
for (i in 1:n){
rst[,i]=ifelse((set-rowSums(rst*rep(c(2^((n-1):0)),each=2^n)))/(2^(n-i))>=1,1,0)
}
rst
}
ind
bape[[1]][]
bape[[1]][3]
bape=BAPE(ind)
ind
ind[[1]][3]
ind[[1]][3]=0
ind
bape=BAPE(ind)
bape
length(bape[[1]])
save.image("E:/MissingGibbs2_modified/Revison.RData")
help(dbinom)
dbinom(46:54, 100, 0.5)
sum(dbinom(46:54, 100, 0.5))
dbinom(46:54, 1, 0.5)
dbinom(46:54, 10, 0.5)
dbinom(46:54, 100, 0.5)
dbinom(1:2,10)
dbinom(1:2,10,0.8)
dbinom(1,10,0.8)
dbinom(1,1,0.8)
dbinom(1,1,0.8)^2
dbinom(2,2,0.8)
dbinom(1:2,1,0.8)
dbinom(1:2,1,0.8)^0.2
0.8^0.2
dbinom((1:2)*0.2,0.2,0.8)^0.2
dbinom(round((1:2)*0.2),round(0.2),0.8)^0.2
load("E:/Missing_data_italy_weighted/step1_datageneration.RData")
Weigh
summary(Weigh)
dbinom(round((1:2)*0.2),round(0.2),0.8)
dbinom((1:2)*0.2,0.2,0.8)^0.2
dbinom(1:2,1,0.8)^0.2
round(Weigh)
